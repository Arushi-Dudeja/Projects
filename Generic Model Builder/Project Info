Machine Learning Generic Model Builder  
        
- Built a Machine Learning Tool for the EY Arsenal that allows users to clean and pre-process any dataset, train and build models and test their models on testing dataset
- Added a plethora of supervised and unsupervised ML algorithms for classification, regression, and clustering like Logistic regression, Random Forrest, Ada Boost Classifier, Decision Tree, Gradient Boosting, Extra Trees Classifier, XGBoost Classifier, KNN, SVR, SVC, Linear SVC, Sequential Keras, Stacking Ensemble model, K Means clustering, Hierarchical Clustering, Time Series AR
- Optimized and generalized all the models to enable users to build instant ML models on any dataset they upload
- Used FastAPI and Postman Application to enable users to hit the integrated python scripts for pre-processing, training, and testing data
- Used PostgreSQL to store model datasets, important findings and performance metrics and later publish those to Front-end
- Technology Used: ML Algorithms, Python, API


Note:
1. The following models can be created using this ML Model Builder Asset:
    1.1 Classification Models:
       
        1.1.1 Logistic Regression
        1.1.2 Random Forest Classifier
        1.1.3 AdaBoost Classifier
        1.1.4 Gradient Boosting Classifier
        1.1.5 Support Vector Classifier
        1.1.6 KNNClassifier
        1.1.7 Naive Bayes
        1.1.8 XGBoost Classifier
        1.1.9 ExtraTrees Classifier
        1.1.10 DecisionTree Classifier
        
    1.2 Regression Models:
        1.2.1 Linear Regression
    elif model_n == 'SupportVectorRegressor':
        accuracy, conf_matrix, classi_report, message, model_s1 = SVR(X_train, Y_train, X_test, Y_test, model_xml, model_s, accept_acc, X, Y, df_train)
    elif model_n == 'KNNRegressor':
        accuracy, conf_matrix, classi_report, message, model_s1 = KNNRegressor(X_train, Y_train, X_test, Y_test, model_xml, model_s, accept_acc, X, Y, df_train)   
    elif model_n == 'PolynomialRegression': 
        accuracy, conf_matrix, classi_report, message, model_s1 = PLR(X_train, Y_train, X_test, Y_test, model_xml, model_s, accept_acc, X, Y,df_train)
    elif model_n == 'DecisionTreeRegressor': 
        accuracy, conf_matrix, classi_report, message, model_s1 = DTR(X_train, Y_train, X_test, Y_test, model_xml, model_s, accept_acc, X, Y, df_train)
    elif model_n == 'RandomForestRegressor': 
        accuracy, conf_matrix, classi_report, message, model_s1 = RFR(X_train, Y_train, X_test, Y_test, model_xml, model_s, accept_acc, X, Y,df_train)
    elif model_n == 'GradientBoostingRegressor': 
        accuracy, conf_matrix, classi_report, message, model_s1 = GBR(X_train, Y_train, X_test, Y_test, model_xml, model_s, accept_acc, X, Y,df_train)
    elif model_n == 'MultipleLinearRegression': 
        accuracy, conf_matrix, classi_report, message, model_s1 = MLR(X_train, Y_train, X_test, Y_test, model_xml, model_s, accept_acc, X, Y, df_train)
    elif model_n == 'AR_Timeseries': 
        accuracy ==  AR(model_xml,X,df_train)  
    elif model_n == 'EnsembleClassification':
        accuracy, model_s1 = EnClass(X_train, Y_train, model_s)
        conf_matrix = "No Confusion Matrix for Ensemble Classification"
        classi_report = "No Classification report for Ensemble Classification"
        message = "success" 
    elif model_n == 'EnsembleRegression':
        accuracy, model_s1 = EnReg(X_train, Y_train, model_s)
        conf_matrix = "No Confusion Matrix for Ensemble Regression"
        classi_report = "No Classification report for Ensemble Regression"
        message = "success" 
    elif model_n == 'Keras':
        X = np.array(X)
        in_dim = X.shape[1]
        conf_matrix = "No Confusion Matrix for Ensemble Regression"
        classi_report = "No Classification report for Ensemble Regression"
        print("\nInput dim: ", in_dim)
        if type(Y) == np.array:
            out_dim = int(Y.shape[1])
        else:
            out_dim = 1
            print("\nOutput dim: ", out_dim)
        UID = str(uuid.uuid1())
        model_s = model_s + "-" + UID +".h5"
        
        accuracy, message, model_s1 = SEQ(in_dim, out_dim, X_train, Y_train, X_test, Y_test, model_xml, model_s, accept_acc, X, Y, df_train, test_r, st)
    elif model_n == 'ovoGaussianProcess':
        ovo_model = 'GaussianProcess'
        accuracy, conf_matrix, classi_report, message, model_s1 = OvO(ovo_model, X_train, Y_train, X_test, Y_test, model_xml, model_s, accept_acc, X, Y, df_train) 
    elif model_n == 'LinearSupportVectorClassifier':
        ovo_model = 'LinearSVC'
        accuracy, conf_matrix, classi_report, message, model_s1 = OvO(ovo_model, X_train, Y_train, X_test, Y_test, model_xml, model_s, accept_acc, X, Y, df_train) 
    elif model_n == 'ovoDecisionTree':
        ovo_model = 'DecisionTree'
        accuracy, conf_matrix, classi_report, message, model_s1 = OvO(ovo_model, X_train, Y_train, X_test, Y_test, model_xml, model_s, accept_acc, X, Y, df_train) 
    elif model_n == 'ovoRandomForest':
        ovo_model = 'RandomForest'
        accuracy, conf_matrix, classi_report, message, model_s1 = OvO(ovo_model, X_train, Y_train, X_test, Y_test, model_xml, model_s, accept_acc, X, Y, df_train)  
    elif model_n == 'ovoKNN':
        ovo_model = 'KNN'
        accuracy, conf_matrix, classi_report, message, model_s1 = OvO(ovo_model, X_train, Y_train, X_test, Y_test, model_xml, model_s, accept_acc, X, Y, df_train) 
    elif model_n == 'ovrGaussianProcess':
        ovr_model = 'GaussianProcess'
        accuracy, conf_matrix, classi_report, message, model_s1 = OvR(ovr_model, X_train, Y_train, X_test, Y_test, model_xml, model_s, accept_acc, X, Y, df_train) 
    elif model_n == 'SupportVectorClassifier':
        ovr_model = 'SVC'
        accuracy, conf_matrix, classi_report, message, model_s1 = OvR(ovr_model, X_train, Y_train, X_test, Y_test, model_xml, model_s, accept_acc, X, Y, df_train)
    elif model_n == 'ovrKNN':
        ovr_model = 'KNN'
        accuracy, conf_matrix, classi_report, message, model_s1 = OvR(ovr_model, X_train, Y_train, X_test, Y_test, model_xml, model_s, accept_acc, X, Y, df_train)
    elif model_n == 'ovrDecisionTree':
        ovr_model = 'DecisionTree'
        accuracy, conf_matrix, classi_report, message, model_s1 = OvR(ovr_model, X_train, Y_train, X_test, Y_test, model_xml, model_s, accept_acc, X, Y, df_train) 
    elif model_n == 'ovrRandomForest':
        ovo_model = 'RandomForest'
        accuracy, conf_matrix, classi_report, message, model_s1 = OvR(ovr_model, X_train, Y_train, X_test, Y_test, model_xml, model_s, accept_acc, X, Y, df_train)
    elif model_n == 'ovrLogisticRegression':
        ovo_model = 'LogisticRegression'
        accuracy, conf_matrix, classi_report, message, model_s1 = OvR(ovr_model, X_train, Y_train, X_test, Y_test, model_xml, model_s, accept_acc, X, Y, df_train)  
    else:
        print('Enter a valid model_name')
